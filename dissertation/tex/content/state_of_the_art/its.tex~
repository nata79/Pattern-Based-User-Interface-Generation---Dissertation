\section{ITS}
\label{section:ITS}
The ITS\cite{ITS} system was developed in the early 90s by the IBM research and development department. It was successfully used to develop several large applications like the information kiosks for Seville Expo 92.

The ITS architecture divides applications in four layers. The action layer implements the application's back-end computations. The dialogue layer defines the content of the user interface independent of its style, much like an abstract user interface model. Content specifies the objects included in each frame of the interface, the flow of control among frames, and what actions are associated with each object. The style rule layer defines how the dialogue is presented to the user in terms of appearance and interaction techniques. Finally the style program layer implements the primitive tool-kit objects that are composed by the rule layer into complete interaction techniques.

Before ITS came along there were mainly two types of layered architectures that provided the required flexibility in application development. User Interface Management Systems (UIMS) and tool-kits. UIMS separate the business layer from the interface. Back-end computations are separated from the dialogue control and style. Style, however, was often treated in a single interface layer. Tool-kits separated style from the application. Dialogue control remained in the back-end while the implementation of interaction techniques is hidden in a code library.

The four layers in ITS present a series of advantages that separate this tool from its predecessors. Like in previous UIMS there is a separation from back-end computations and the interface itself. By separating the action layer from the dialogue allows actions to be reused in different applications.

Splitting the interface into separate layers for style-independent dialogue, rule base and tool-kit also gives some benefits. First, the dialogue remains independent of style. A dialogue can be mapped into any different style simply by firing the appropriate rule. Second, interface designers control style rather than application programmers. The rule layer represents the selection criteria for all interaction techniques.

Each layer in ITS architecture corresponds to one of four roles in application development: application programmer, application expert, style expert and style programmer. An application expert is familiar with the domain of the application. The application expert typically is neither trained in software development or part of an information systems department. In ITS, the application expert is the author of the dialogue. A style expert may be a graphic artist or a human factors engineer. Rules give them direct control over style in ITS.

ITS is a specification-based system. The main difference between these tools from automated-design tools like JANUS\cite{janus} is that the modelling language is open whereas in automated-design tools are closed. By lifting this limitation for the developers the final result can have a higher level of quality although it’s dependent from the capabilities of the developer himself.

Even though ITS is a specification-based system, this doesn’t mean that developers have to specify every feature of every individual window. Developers are forced to specify the content of dialogues which is equivalent to the abstract user interface and this is, as been proved to be by experience, the most difficult model to generate by the automated-design tools. The style rules layer or the concrete user interface model doesn’t have to be totally specified. This doesn’t mean that ITS generates this model but that developers can reuse rule sets from libraries that contain the abstract to concrete mapping for significant portions of the interface specifications.